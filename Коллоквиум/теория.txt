1. ООП — парадигма разработки, направленая на организацию программного кода в виде объектов, 
которые взаимодействуют между собой. Строится на принципах: инкапусляция, наследование, полиморфизм, абстракция.

2. Объекто ориентированная декомпозиция — способ организации системы, при котором она делится на взаимосвязанные объекты, 
которые представляют реальные или логические сущности в этой предметной области.

3. Дизайн ПО — процесс формирования структуры и компонентов программной системы с целью обеспечения её функциональности, 
качества и удобства использования. Включает в себя архитектуру системы, модули и компонентны, интерфейсы,
алгоритмы и структуры данных, документации, итеративный процесс. 
Примеры: 
     1. UI дизайн — интерфейс включает в себя кнопки, меню и другие элементы управления, оптимизированные для использования на экранах, 
с учетом простоты навигации и удобства и интуитивного понимания пользователя.
     2. Микросервисная архитектура — приложение разбивается на мелкие, независимые сервисы, каждый из которых выполняет конкретную задачу.

4. Магическое число 7 Миллера — концепция, согласно которой человек может эффективно воспринимать и обрабатывать 7 (+-2) объекта.
Примеры:
     1. Группировка элементов или функций в интерфейсах для лучшего восприятия пользователем
     2. На сайтах в меню навигации не более 7 пунктов, зачастую ещё меньше
     3. Рекомендации использовать пароли около 8 символов для достаточной защиты, но чтобы их можно было лего запомнить
     4. При моделировании с помощью UML-диаграмм лучше ограничивать количество сущностей до 7, чтобы избежать перегрузки информации и упростить понимание структуры системы.
     5. При работе в IDE держать открытыми не более 7 вкладок, чтобы не теряться в них.
     6. При отладке использовать не больше 7 логовю
     7. В каждом модуле использовать не более 7 компонентов.

5. Признаки сложных систем по Гради Бучу:
     1. Иерархия — система состоит из вложенных подсистем: многоуровневая архитектура приложения, сетевые протоколы, операционная система.
     2. Простота компонентнов — отдельные элементы системы проще, чем вся система: микросервисная архитектура, база данных, компилятор.
     3. Связи между компонентами через интерфейсы —  это позволяет развивать части системы независимо: плагинная система, модульное приложение.
     4. Абстракция и инкапсуляция — сокрытие сложности через четкие интерфейсы и скрытие реализации: API-интерфейсы, виртуализация, библиотеки и фреймворки
     5. Эмерджентность — система показывает свойства, которых нет у отдельных компонентов: 
Примеры:
  1. Операционная система: 
     Иерархия: ядро, системные вызовы, драйверы, приложения.
     Простота компонентов: драйвер устройства только общается с конкретным железом. Файловая система только управляет файлами.
     Связи через интерфейсы: приложения используют syscall, не зная внутренней реализации.
     Абстракция: Виртуальная файловая система (VFS) — абстрагирует разные ФС (ext4, NTFS, FAT). Процессы — абстракция над исполняемой программой.
     Эмерджентность: из простых процессов и планировщика возникает возможность одновременно работать с несколькими программами.
  2. Умный дом:
     Иерархия: концентратор, роутер,умные устройства.
     Простота компонентов: датчик движения только фиксирует движение. Лампа только включается/выключается.
     Связи через интерфейсы: устройства общаются по Wi-Fi через стандартные протоколы. Приложение управляет через Cloud API.
     Абстракция: сценарии работы это абстракция над набором действия устройст. Комната это абстракция над группой устройств.
     Эмерджентность: Из простых датчиков и ламп возникает адаптивное поведение, т.е. система сама подстраивает свет и температуру под привычки жильцов.
  3. Система такси:
     Иерархия: диспетчерский сервер, приложение водителя, приложение пассажира, система оплаты.
     Простота компонентов: карты только строят маршрут, рейтнговая система только рассчитывает оценку.
     Связи через интерфейсы: Приложения общаются с сервером через REST API.
     Абстракция: стоимость поездки это абстракция над расстоянием и временем.
     Эмерджентность: простые действия — поиск заказа водителем и поиск такси пассажиром, в результате система сбалансированно распределяет.
     




